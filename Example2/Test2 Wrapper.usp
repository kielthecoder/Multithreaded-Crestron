/*
Dealer Name: IMT
System Name:
System Number:
Programmer: Kiel Lofstrand
Comments:
*/

// COMPILER DIRECTIVES /////////////////////////////////////////////////////////////////////

#ENABLE_DYNAMIC
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

// LIBRARIES ///////////////////////////////////////////////////////////////////////////////

#USER_SIMPLSHARP_LIBRARY "ThreadTest"

// INPUTS //////////////////////////////////////////////////////////////////////////////////

DIGITAL_INPUT Initialize;
DIGITAL_INPUT Run;

// OUTPUTS /////////////////////////////////////////////////////////////////////////////////

STRING_OUTPUT Message;

// SOCKETS /////////////////////////////////////////////////////////////////////////////////

// PARAMETERS //////////////////////////////////////////////////////////////////////////////

STRING_PARAMETER  My_Name[50];
INTEGER_PARAMETER My_Frequency;

// STRUCTURES //////////////////////////////////////////////////////////////////////////////

// GLOBAL VARIABLES ////////////////////////////////////////////////////////////////////////

Test2 myTest;

// FUNCTIONS ///////////////////////////////////////////////////////////////////////////////

// EVENT HANDLERS //////////////////////////////////////////////////////////////////////////

PUSH Initialize
{
	myTest.Initialize(My_Name, My_Frequency);
}

PUSH Run
{
	myTest.Start();
}

RELEASE Run
{
	myTest.Stop();
}

// CALLBACKS AND DELEGATES /////////////////////////////////////////////////////////////////

EVENTHANDLER MyTimerEvent (Test1 sender, TimerEventArgs e)
{
	Message = e.Message;
}

// MAIN ////////////////////////////////////////////////////////////////////////////////////

FUNCTION Main()
{
	RegisterEvent(myTest, TimerEvent, MyTimerEvent);

	WaitForInitializationComplete();
}
